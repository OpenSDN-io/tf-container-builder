#!/bin/bash

. ./network-functions-vrouter

function pkt_setup () {
    [ ! -f /sys/class/net/$1/queues/rx-0/rps_cpus ] && return 0
    declare q r s mask str i
    for f in /sys/class/net/$1/queues/rx-* ; do
        q="$(echo $f | cut -d '-' -f2)"
        r=$(($q%32))
        s=$(($q/32))
        ((mask=1<<$r))
        str=(`printf "%x" $mask`)
        if [ $s -gt 0 ]; then
            for ((i=0; i < $s; i++)) ; do
                str+=,00000000
            done
        fi
        echo $str > $f/rps_cpus
    done
    ip link set dev $1 up
}

function load_vrouter() {
    lsmod | grep -q vrouter && return 0
    if free -h && sync
    then
        if ((0 == (${HUGE_PAGES_2MB:-0} + ${HUGE_PAGES_1GB:-0})))
        then
            echo 2 >/proc/sys/vm/drop_caches
        fi
    fi && free -h
    local vrouter_opts=${VROUTER_MODULE_OPTIONS##[\"\']}
    vrouter_opts=${vrouter_opts%%[\"\']}
    load_kernel_module vrouter $vrouter_opts
}

function create_vhost0() {
    # $1 and $2 are comma-separated list of interfaces
    # $3 is a vrrp mac for L3MH case
    local phys_int=$1
    local phys_int_mac=$2
    local vhost0_mac=${3:-$phys_int_mac}
    load_vrouter
    pkt_setup pkt1
    pkt_setup pkt2
    pkt_setup pkt3
    vif --create vhost0 --mac $vhost0_mac
    local phys_int_arr=( $(echo $phys_int | tr ',' ' ') )
    local phys_int_mac_arr=( $(echo $phys_int_mac | tr ',' ' ') )
    local i=${#phys_int_arr[@]}
    for ((i--;i>=0;i--)); do
        vif --add ${phys_int_arr[$i]} --mac ${phys_int_mac_arr[$i]} --vrf 0 --vhost-phys --type physical
    done
    vif --add vhost0 --mac $vhost0_mac --vrf 0 --type vhost --xconnect $phys_int
    ip link set dev vhost0 address $vhost0_mac
    ip link set dev vhost0 up
}

function remove_vhost0_kernel() {
    if ip link sh dev vhost0 >/dev/null 2>&1 ; then
        echo "INFO: down vhost0 and remove the link"
        ip link set dev vhost0 down
        ip link del vhost0
        unload_kernel_module vrouter
    fi
}

# ifup interface
function ifup_init_vhost() {
    ip addr show dev vhost0 >/dev/null 2>&1 && return 0
    local phys_int=${BIND_INT}
    [ -z "$phys_int" ] && { echo "ERROR: BIND_INT in not set in ifcfg-vhost0" && return 1; }
    if [[ -n "L3MH_CIDR" ]]; then
        ifup_init_vhost_l3mh
    else
        ifup_init_vhost_classic
    fi
}

function ifup_init_vhost_classic() {
    local phys_int=${BIND_INT}
    local physdev=''
    if physdev=`grep PHYSDEV /etc/sysconfig/network-scripts/ifcfg-${phys_int}`; then
      local parent_dev=`echo $physdev|awk -F"=" '{print $2}'`
      ifup $parent_dev
    fi
    # up iface to read info from it on next steps
    ifup ${phys_int}
    local phys_int_mac=${MACADDR}
    [ -z "$phys_int_mac" ] && phys_int_mac=$(get_iface_mac ${phys_int})
    [ -z "$phys_int_mac" ] && { echo "ERROR: cant detect MAC for $phys_int" && return 1; }
    local addrs=$(get_addrs_for_nic $phys_int)
    declare line addr_to_del
    echo "$addrs" | while IFS= read -r line ; do
        addr_to_del=`echo $line | cut -d ' ' -f 1`
        ip address delete $addr_to_del dev $phys_int
    done
    create_vhost0 $phys_int $phys_int_mac
    if ! prepare_ifcfg $phys_int kernel $phys_int ; then
        echo "INFO: reinit ${phys_int} to disable NM and dhcp after ifcfg patching"
        ifdown ${phys_int}
        kill_dhcp_clients ${phys_int}
        ifup ${phys_int}
    fi
}

function ifup_init_vhost_l3mh() {
    local phys_ints=${BIND_INT}
    # up iface to read info from it on next steps
    declare phys_int_mac_arr
    for phys_int in $(echo $phys_ints | tr ',' ' ') ; do
        ifup ${phys_int}
        phys_int_mac_arr=( $phys_int_mac_arr $(get_iface_mac $phys_int) )
    done
    create_vhost0 $phys_ints $(echo "${phys_int_mac_arr[@]}" | tr ' ' ',') $L3MH_VRRP_MAC
}

# ifdown interface
function ifdown_vhost() {
    # Use SIGTERM to remove vhost and reinit bind_int via ifup in ifdown_vhost_post
    stop_docker_container $CONTRAIL_VROUTER_AGENT_CONTAINER_NAME SIGTERM
    remove_vhost0_kernel
}

function ifdown_vhost_post() {
    local phys_int=${BIND_INT}
    [ -z "$phys_int" ] && { echo "ERROR: BIND_INT in not set in ifcfg-vhost0" && return 1; }
    restore_phys_int $phys_int
}
