#!/bin/bash

. ./network-functions-vrouter

function is_dpdk_running() {
    netstat -xl | grep -q  dpdk_netlink
}

function wait_dpdk_start() {
    local i=0
    for i in {1..60} ; do
        echo "INFO: wait DPDK agent to run... $i"
        if is_dpdk_running ; then
            return 0
        fi
        sleep 5
    done
    return 1
}

#L3MH case
function get_static_dpdk_route() {
    local control_node_ip=$1
    local route
    #Getting route and join it in one line
    route=$(ip route show $control_node_ip | sed -E 's/dev [a-z0-9]+ //' | tr '\n' ' ' | sed -E 's/\s+/ /g')
    echo "$route"
}

function create_vhost0_dpdk() {
    echo "INFO: create_vhost0_dpdk()"
    local phys_int=$1
    local phys_int_mac=$2
    echo "INFO: Creating ${phys_int} interface with mac $phys_int_mac via vif utility..."
    if ! vif --add ${phys_int} --mac ${phys_int_mac} --vrf 0 --vhost-phys --type physical --pmd --id 0 ; then
        echo "ERROR: Failed to adding ${phys_int} interface"
        return 1
    fi
    echo "INFO: Adding vhost0 interface with vif utility..."
    if ! vif --add vhost0 --mac ${phys_int_mac} --vrf 0 --type vhost --xconnect 0 --pmd --id 1 ; then
        echo "ERROR: Failed to add vhost0 interface"
        return 1
    fi
    if ! ip link set dev vhost0 up ; then
        echo "ERROR: Failed to up vhost0 interface"
        return 1
    fi
    if ! ip link set dev vhost0 address $phys_int_mac ; then
        echo "ERROR: Failed to set vhost0 address $phys_int_mac"
        return 1
    fi
}

function create_vhost0_l3mh_dpdk() {
    echo "INFO: create_vhost0_l3mh_dpdk()"
    local binding_data_dir='/var/run/vrouter'
    local phys_int_list=$(cat ${binding_data_dir}/nic)
    local phys_int phys_int_mac
    local i=0
    for phys_int in $phys_int_list; do
        phys_int_mac=$(cat ${binding_data_dir}/${phys_int}_mac)
        echo "INFO: Creating $phys_int interface with mac $phys_int_mac via vif utility. (id=$i)"

        echo "DEBUG: vif --add ${phys_int} --mac ${phys_int_mac} --vrf 0 --vhost-phys --type physical --pmd --id ${i}"
        if ! vif --add ${phys_int} --mac ${phys_int_mac} --vrf 0 --vhost-phys --type physical --pmd --id ${i} ; then
            echo "ERROR: Failed to adding ${phys_int} interface via vif"
            return 1
        fi
        i=$[$i+1]
    done
    echo "INFO: Adding vhost0 interface with vif utility. (id=$i)"
    echo "DEBUG: vif --add vhost0 --mac ${L3MH_VRRP_MAC} --vrf 0 --type vhost --xconnect 0 --pmd --id ${i}"
    if ! vif --add vhost0 --mac ${L3MH_VRRP_MAC} --vrf 0 --type vhost --xconnect 0 --pmd --id ${i} ; then
        echo "ERROR: Failed to add vhost0 interface"
        return 1
    fi
    if ! ip link set dev vhost0 address ${L3MH_VRRP_MAC} ; then
        echo "ERROR: Failed to set vhost0 address ${L3MH_VRRP_MAC}"
        return 1
    fi
    if ! ip link set dev vhost0 up ; then
        echo "ERROR: Failed to up vhost0 interface"
        return 1
    fi
}


function get_next_free_bond_name() {
    local i=0
    local next_name
    while (true) ; do
        next_name="bond${i}"
        if [ ! -e "/sys/class/net/${next_name}" ] && [ ! -e /etc/sysconfig/network-scripts/ifcfg-${next_name} ] ; then
            break
        fi
        (( i+=1 ))
    done
    echo $next_name
}

function ifcfg_read_phys_int_mac_pci_dpdk() {
    # in case of running from ifup in tripleo there is no way to read params from system,
    # all of them are to be available from ifcfg-vhost0 (that are passed via env to container)
    declare phys_int phys_int_mac pci
    if [[ -n "$BIND_INT" ]] ; then
        pci=${BIND_INT}
        phys_int_mac=${MACADDR}
        local binding_data_dir='/var/run/vrouter'
        if [ -f $binding_data_dir/nic ] ; then
            # just read already saved params from files
            phys_int=$(cat $binding_data_dir/nic)
            [ -z "$phys_int_mac" ] && phys_int_mac=$(cat $binding_data_dir/${phys_int}_mac)
        else
            if [ -z "$BOND_MODE" ] ; then
                # for no bonding detect name by pci
                phys_int=$(get_ifname_by_pci $pci)
            else
                # first time, so use free bond nic name
                # BOND_INT_NAME can be used to avoid autogeneration logic in case of issues
                phys_int=${BOND_INT_NAME:-$(get_next_free_bond_name)}
            fi
            if [ -z "$phys_int_mac" ] ; then
                local _first_int=$phys_int
                if [ -n "$BOND_MODE" ] ; then
                    local _first_pci=$(echo $pci | cut -d ',' -f 1)
                    _first_int=$(get_ifname_by_pci $_first_pci)
                fi
                phys_int_mac=$(get_iface_mac $_first_int)
            fi
        fi
    fi
    echo $phys_int $phys_int_mac $pci
}

function l3mh_dpdk_create_interfaces_and_routes() {
    local phys_int_arr="$@"
    local phys_int
    local phys_int_mac
    local phys_int_ip
    local i=0
    local tap
    local ip_loopback
    echo "INFO: Creating tuntap interfaces and routes (L3MH-DPDK case)"
    for phys_int in ${phys_int_arr[@]}; do
        tap="tap${i}"
        phys_int_mac=$(cat $binding_data_dir/${phys_int}_mac)
        echo "DEBUG: ip link set dev ${tap} address ${phys_int_mac}"
        ip link set dev ${tap} address ${phys_int_mac}
        cat $binding_data_dir/${phys_int}_ip_addresses | while IFS= read -r phys_int_ip ; do
            echo "DEBUG: ip addr add ${phys_int_ip} dev ${tap}"
            ip addr add ${phys_int_ip} dev ${tap}
        done
        echo "DEBUG: ip link set dev ${tap} up"
        ip link set dev ${tap} up
        i=$[$i+1]
    done
    #Adding static routes
    ip_loopback=$(eval_l3mh_loopback_ip)
    echo "DEBUG: ip route add table 100 to default dev vhost0"
    ip route add table 100 to default dev vhost0
    echo "DEBUG: ip rule add from ${ip_loopback} table 100"
    ip rule add from ${ip_loopback} table 100
}

function start_dpdk_container() {
    [ -z "$CONTRAIL_VROUTER_AGENT_DPDK_DOCKER_IMAGE" ] && \
        { echo 'ERROR: CONTRAIL_VROUTER_AGENT_DPDK_DOCKER_IMAGE is not provided' && return 1; }

    local env_options="-e AGENT_MODE=$TYPE"
    env_options+=" -e BIND_INT=$BIND_INT"
    [ -n "$BOND_MODE" ] && env_options+=" -e BOND_MODE=$BOND_MODE"
    [ -n "$BOND_POLICY" ] && env_options+=" -e BOND_POLICY=$BOND_POLICY"
    [ -n "$VLAN_ID" ] && env_options+=" -e VLAN_ID=$VLAN_ID"
    [ -n "$DRIVER" ] && env_options+=" -e DPDK_UIO_DRIVER=$DRIVER"
    [ -n "$CPU_LIST" ] && env_options+=" -e CPU_CORE_MASK=$CPU_LIST"
    [ -n "$SERVICE_CORE_MASK" ] && env_options+=" -e SERVICE_CORE_MASK=$SERVICE_CORE_MASK"
    [ -n "$DPDK_CTRL_THREAD_MASK" ] && env_options+=" -e DPDK_CTRL_THREAD_MASK=$DPDK_CTRL_THREAD_MASK"
    [ -n "$DPDK_COMMAND_ADDITIONAL_ARGS" ] && env_options+=" -e \"DPDK_COMMAND_ADDITIONAL_ARGS=$DPDK_COMMAND_ADDITIONAL_ARGS\""
    [ -n "$NIC_OFFLOAD_ENABLE" ] && env_options+=" -e \"NIC_OFFLOAD_ENABLE=$NIC_OFFLOAD_ENABLE\""
    [ -n "$LACP_RATE" ] && env_options+=" -e \"LACP_RATE=$LACP_RATE\""
    [ -n "$L3MH_CIDR" ] && env_options+=" -e \"L3MH_CIDR=$L3MH_CIDR\""
    [ -n "$LOG_LEVEL" ] && env_options+=" -e \"LOG_LEVEL=$LOG_LEVEL\""
    [ -n "$VROUTER_GATEWAY" ] && env_options+=" -e \"VROUTER_GATEWAY=$VROUTER_GATEWAY\""

    local cmd=$(which podman 2>/dev/null || echo docker)
    local container_name=${CONTRAIL_VROUTER_AGENT_DPDK_CONTAINER_NAME:-'contrail-vrouter-agent-dpdk'}
    if $cmd inspect $container_name 2>&1 | grep -io 'status.*running' ; then
        echo "INFO: container $container_name is already up"
        return 0
    fi
    # remove if container exist
    remove_docker_container $container_name SIGTERM
    local log_dir=${LOG_DIR:-'/var/log/contrail'}
    local node_type=${NODE_TYPE:-'vrouter'}
    local service_name=${SERVICE_NAME:-'agent-dpdk'}
    mkdir -p /var/lib/contrail
    mkdir -p /var/log/containers/contrail/dpdk
    mkdir -p /var/crashes
    eval "$cmd run \
        --detach \
        --name ${container_name} \
        --net host --privileged \
        --restart always \
        -v /etc/hosts:/etc/hosts:ro \
        -v /etc/localtime:/etc/localtime:ro \
        -v /dev:/dev \
        -v /etc/sysconfig/network-scripts:/etc/sysconfig/network-scripts \
        -v /lib/modules:/lib/modules \
        -v /var/run:/var/run \
        -v /var/lib/contrail:/var/lib/contrail \
        -v /var/log/containers/contrail/dpdk:/var/log/contrail \
        -v /var/crashes:/var/crashes \
        ${env_options} \
        ${CONTRAIL_VROUTER_AGENT_DPDK_DOCKER_IMAGE}"
}

function restore_iface_driver() {
    local pci=$1
    local dpdk_drv=$2
    [ -z "$dpdk_drv" ] && return
    local binding_data_dir='/var/run/vrouter'
    [ ! -d "$binding_data_dir" ] && return

    if [[ -f /etc/sysconfig/network-scripts/${dpdk_drv}/${dpdk_drv}-int-restore.sh ]]; then
        source /etc/sysconfig/network-scripts/${dpdk_drv}/${dpdk_drv}-int-restore.sh
        return
    fi

    declare i
    for i in ${pci//,/ } ; do
        if [ -f "$binding_data_dir/$i" ] ; then
            local drv=$(awk '/Driver:/{print($2)}' "$binding_data_dir/$i")
            echo "INFO: rebind device $i from $dpdk_drv to driver $drv"
            if [ -e "/sys/bus/pci/drivers/${dpdk_drv}/$i" ] ; then
                echo "INFO: unbind $i from $dpdk_drv"
                echo -n $i > /sys/bus/pci/drivers/${dpdk_drv}/unbind
            fi
            if [ ! -e "/sys/bus/pci/drivers/${drv}/$i" ] ; then
                echo "INFO: bind $i to $drv"
                # NOTE: new_id is not needed because nic is always bind to network on boot first
                # local vendor="$(cat /sys/bus/pci/devices/${i}/vendor | awk -F 'x' '{print($NF)}')"
                # local device="$(cat /sys/bus/pci/devices/${i}/device | awk -F 'x' '{print($NF)}')"
                # [[ -n "$vendor" && -n "$device" ]] && echo -n "$vendor $device" > /sys/bus/pci/drivers/${drv}/new_id
                echo -n "$i" > /sys/bus/pci/drivers/${drv}/bind
            fi
            rm -f "$binding_data_dir/$i"
        fi
    done
}

function restore_phys_int_dpdk() {
    local pci=$1
    local drv=${2:-${DPDK_UIO_DRIVER}}
    declare phys_int restore_ip_cmd routes
    local binding_data_dir='/var/run/vrouter'
    [ -f "$binding_data_dir/nic" ] && phys_int=$(cat $binding_data_dir/nic)
    local netscript_dir='/etc/sysconfig/network-scripts'
    if [ ! -d "$netscript_dir" ] ; then
        restore_ip_cmd=$(gen_ip_addr_add_cmd vhost0 $phys_int)
        [ -f "$binding_data_dir/${phys_int}_routes" ] && routes=$(cat $binding_data_dir/${phys_int}_routes)
        del_dev_routes vhost0 "$routes"
    fi
    restore_iface_driver $pci $drv
    if [ -n "$phys_int" ] ; then
        restore_phys_int $phys_int "$restore_ip_cmd" "$routes"
        rm -f "$binding_data_dir/${phys_int}"*
    else
        echo "WARNING: there is info about phys_int to restore"
    fi
    rm -f "$binding_data_dir/nic"
}

function restore_phys_int_dpdk_l3mh() {
    local drv=${1:-${DPDK_UIO_DRIVER}}
    declare phys_int_list phys_int restore_ip_cmd routes
    local binding_data_dir='/var/run/vrouter'
    [ -f "$binding_data_dir/nic" ] && phys_int_list=$(cat $binding_data_dir/nic)
    for phys_int in $phys_int_list; do
        local pci=$(cat ${binding_data_dir}/${phys_int}_pci)
        local netscript_dir='/etc/sysconfig/network-scripts'
        if [ ! -d "$netscript_dir" ] ; then
            restore_ip_cmd=$(gen_ip_addr_add_cmd vhost0 $phys_int)
            [ -f "$binding_data_dir/${phys_int}_routes" ] && routes=$(cat $binding_data_dir/${phys_int}_routes)
            del_dev_routes vhost0 "$routes"
        fi
        restore_iface_driver $pci $drv
        if [ -n "$phys_int" ] ; then
            restore_phys_int $phys_int "$restore_ip_cmd" "$routes"
            rm -f "$binding_data_dir/${phys_int}"*
        else
            echo "WARNING: there is info about phys_int to restore"
        fi
    done
    if [ -f "$binding_data_dir/static_dpdk_routes" ] && grep -q nexthop "$binding_data_dir/static_dpdk_routes"; then
        local static_routes=$(cat ${binding_data_dir}/static_dpdk_routes)
        for ((i=0; i<3; ++i)) ; do
            echo "INFO: Restoring static routes. try $i out of 3"      
            sleep 10
            if ip route add $static_routes ; then
                break
            fi
        done
    fi
    rm -f "$binding_data_dir/nic"
}


# ifup interface
#   there are variables from ifcfg-vhost0:
#       DEVICETYPE=vhost
#       TYPE=dpdk
#       BIND_INT=<pci_string>
#       BOND_MODE=<bond_mode>
#       BOND_POLICY=<bond_policy>
#       DRIVER=<dpdk_driver>
#       CPU_LIST=<cpu_list>
#       VLAN_ID=<vlan_id>
#   there are variables from network-functions-vrouter-dpdk-env
#       SERVICE_CORE_MASK=<cpu mask>
#       DPDK_CTRL_THREAD_MASK=<cpu mask>

function ifup_init_vhost() {
    ip addr show dev vhost0 >/dev/null 2>&1 && return 0
    if [[ -n "$L3MH_CIDR" ]]; then
        ifup_init_vhost_l3mh
    else
        ifup_init_vhost_classic
    fi
}

function ifup_init_vhost_start_dpdk() {
    prepare_vif_config $TYPE
    # ifup could be called from host (osp) and container (k8s, rhel, etc),
    # in context of host - it should just start container and
    # wait till container creates vhost0
    if [[ -z "$CONTRAIL_DPDK_CONTAINER_CONTEXT" ]] ; then
        start_dpdk_container || return 1
        wait_dpdk_start || return 1
        wait_vhost0 || return 1
    fi
}

function ifup_init_vhost_classic() {
    declare phys_int phys_int_mac pci
    IFS=' ' read -r phys_int phys_int_mac pci <<< $(ifcfg_read_phys_int_mac_pci_dpdk)
    [ -z "$pci" ] && { echo "ERROR: BIND_INT in not set in ifcfg-vhost0" && return 1; }
    [ -z "$phys_int" ] && { echo "ERROR: failed to detect ifname by pci $pci" && return 1; }
    [ -z "$phys_int_mac" ] && { echo "ERROR: failed to detect MAC for $phys_int" && return 1; }
    ifup_init_vhost_start_dpdk
}

function prepare_ifcfg_l3mh() {
    # comma-separated physical interfaces
    local phys_ints=$1
    local bind_type=$2
    local mtu=$3
    local netscript_dir='/etc/sysconfig/network-scripts'
    local ifcfg_files=1
    local pci_list=''
    local pci
    local binding_data_dir='/var/run/vrouter'
    for phys_int in $(echo $phys_ints | tr ',' ' ') ; do
        if [[ ! -e /etc/sysconfig/network-scripts/ifcfg-${phys_int} ]]; then
            ifcfg_files=0
        fi
        if [[ -f ${binding_data_dir}/${phys_int}_pci ]]; then
            pci=$(cat ${binding_data_dir}/${phys_int}_pci)
            if [[ -z $pci_list ]]; then
                pci_list+="$pci"
            else
                pci_list+=",$pci"
            fi
        else
            echo "ERROR: no file ${binding_data_dir}/${phys_int}_pci"
            return 1
        fi
    done
    if [[ $ifcfg_files == 0 && ! -e "${netscript_dir}/ifcfg-vhost0" ]] ; then
        return 0
    fi
    echo "INFO: create ifcfg-vhost0 for l3mh configuration"
    pushd "$netscript_dir"
    if [[ ! -f ifcfg-vhost0 ]] ; then
        cat >ifcfg-vhost0 <<EOF
# This file is autogenerated by tf
DEVICE=vhost0
ONBOOT=yes
HOTPLUG=no
NM_CONTROLLED=no
PEERDNS=no
MTU=$mtu
BOOTPROTO=static
IPADDR=
NETMASK=
DEVICETYPE=vhost
TYPE=${bind_type}
BIND_INT=${pci_list}
EOF
    fi
    popd
}

function ifup_init_vhost_l3mh() {
    ifup_init_vhost_start_dpdk
}

# ifdown interface
function ifdown_vhost() {
    [ -n "$CONTRAIL_DPDK_CONTAINER_CONTEXT" ] && {
        echo "ERROR: container context... should not be called from container" && return 1 ; }
    local container_name=${CONTRAIL_VROUTER_AGENT_DPDK_CONTAINER_NAME:-'contrail-vrouter-agent-dpdk'}
    stop_docker_container $container_name SIGTERM
    remove_docker_container $container_name SIGTERM
}

function ifdown_vhost_post() {
    [ -n "$CONTRAIL_DPDK_CONTAINER_CONTEXT" ] && {
        echo "ERROR: container context... should not be called from container" && return 1 ; }
    if [[ -n "$L3MH_CIDR" ]]; then
        restore_phys_int_dpdk_l3mh $DRIVER
    else
        [ -z "$BIND_INT" ] && { echo "ERROR: BIND_INT in not set in ifcfg-vhost0" && return 1; }
        restore_phys_int_dpdk $BIND_INT $DRIVER
    fi
}


